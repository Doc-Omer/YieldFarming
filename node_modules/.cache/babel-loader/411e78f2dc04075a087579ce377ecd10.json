{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\moham\\\\Documents\\\\OptimusFox\\\\Yield Farming\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar.js';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main.js';\nimport ParticleSettings from './ParticleSettings';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"No ethereum browser detected. Check out Metamask\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //load tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Error! Tether contract not deployed - no network detected');\n\n              case 19:\n                //load tether contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 25;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Error! RWD contract not deployed - no network detected');\n\n              case 30:\n                //load DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 36;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 36:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: stakingBalance.toString()\n                });\n                _context3.next = 41;\n                break;\n\n              case 40:\n                window.alert('Error! Decentral Bank contract not deployed - no network detected');\n\n              case 41:\n                this.setState({\n                  loading: false\n                });\n\n              case 42:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // two functions: One that stakes and another that unstakes\n    // leverage that we ahve already created in our decentralBank Contract - deposit tokens and unstaking\n    // all of this for the staking token\n    // Deposit tokens TransferFrom\n    // function approved transaction Hash.\n    //STAKING FUNCTION >> decentralBank.depositTokens(send transactionHash => )\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('TransactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // Our react Code\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }\n        }, \"Loading please...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 47\n          }\n        });\n      }\n      {\n        console.log(\"checling\", this.state.loading);\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/moham/Documents/OptimusFox/Yield Farming/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSettings","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","content","margin","console","log","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Navbar from './Navbar.js';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\nimport Main from './Main.js';\r\nimport ParticleSettings from './ParticleSettings'\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount(){\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    async loadWeb3(){\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if (window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert(\"No ethereum browser detected. Check out Metamask\");\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account: account[0]})\r\n        const networkId = await web3.eth.net.getId()\r\n\r\n        //load tether contract\r\n        const tetherData = Tether.networks[networkId]\r\n        if(tetherData){\r\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address) \r\n            this.setState({tether}) \r\n            const tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n            this.setState({tetherBalance: tetherBalance.toString() })\r\n        } else {\r\n            window.alert('Error! Tether contract not deployed - no network detected');\r\n        }\r\n\r\n\r\n        //load tether contract\r\n        const rwdData = RWD.networks[networkId]\r\n        if(rwdData){\r\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address) \r\n            this.setState({rwd}) \r\n            const rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n            this.setState({rwdBalance: rwdBalance.toString() })\r\n        } else {\r\n            window.alert('Error! RWD contract not deployed - no network detected');\r\n        }\r\n\r\n        //load DecentralBank contract\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n        if(decentralBankData){\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address) \r\n            this.setState({decentralBank}) \r\n            const stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({rwdBalance: stakingBalance.toString() })\r\n        } else {\r\n            window.alert('Error! Decentral Bank contract not deployed - no network detected');\r\n        }\r\n\r\n        this.setState({loading: false})\r\n    }\r\n\r\n    // two functions: One that stakes and another that unstakes\r\n    // leverage that we ahve already created in our decentralBank Contract - deposit tokens and unstaking\r\n    // all of this for the staking token\r\n    // Deposit tokens TransferFrom\r\n    // function approved transaction Hash.\r\n    //STAKING FUNCTION >> decentralBank.depositTokens(send transactionHash => )\r\n\r\n    stakeTokens = (amount) => {\r\n        this.setState({loading: true})\r\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {  \r\n            this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n            this.setState({loading: false})\r\n        })\r\n    })\r\n    }\r\n\r\n    //Unstake Tokens\r\n    unstakeTokens = () => {\r\n        this.setState({loading: true})\r\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('TransactionHash', (hash) => {\r\n             this.setState({loading: false})\r\n        })\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {  \r\n            account : '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '0',\r\n            rwdBalance: '0',\r\n            stakingBalance: '0',\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    // Our react Code\r\n    render() {\r\n        let content\r\n        {this.state.loading ? content = \r\n        <p id='loader' className='text-center' style={{margin:'30px'}}>\r\n            Loading please...</p> : content = <Main\r\n            tetherBalance = {this.state.tetherBalance}\r\n            rwdBalance = {this.state.rwdBalance}\r\n            stakingBalance = {this.state.stakingBalance}\r\n            stakeTokens = {this.stakeTokens}\r\n            unstakeTokens = {this.unstakeTokens}\r\n            />} \r\n\r\n            {console.log(\"checling\",this.state.loading)}\r\n        return (\r\n            <div className='App' style={{position: 'relative'}}>\r\n                <div style={{position: 'absolute'}}> \r\n                <ParticleSettings/>\r\n                </div>\r\n                <Navbar account = {this.state.account}/>\r\n                <div className='container-fluid mt-5'>\r\n                    <div className='row' >\r\n                        <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight: '100vm'}}> \r\n                            <div>\r\n                                {content}\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}